apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-partition-metadata
spec:
  workspaces:
    - name: tables-list
  steps:
    - name: update-partition-metadata
      image: quay.io/opendatahub/trino:356
      env:
        - name: TRINO_USER
          valueFrom:
            secretKeyRef:
              name: trino-admin-credentials
              key: TRINO_USER
        - name: TRINO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trino-admin-credentials
              key: TRINO_PASSWORD
        - name: TRINO_HOST
          valueFrom:
            secretKeyRef:
              name: trino-admin-credentials
              key: TRINO_HOST
      script: |
        #! /bin/python
        import trino
        import json
        import urllib3
        import os
        import sys

        # Disable warnings from urllib3
        urllib3.disable_warnings()

        with open('$(workspaces.messages.path)') as f:
            TABLE_DEFS = f.read()

        UPDATE_PARTITION = "call hive.system.sync_partition_metadata('{}','{}','FULL')"

        conn = trino.dbapi.connect(
            host=os.environ["TRINO_HOST"],
            port=443,
            user=os.environ["TRINO_USER"],
            catalog='hive',
            http_scheme='https',
            verify=False,
            auth=trino.auth.BasicAuthentication(os.environ["TRINO_USER"], os.environ["TRINO_PASSWORD"])
        )

        table_definitions = json.loads(TABLE_DEFS)
        failures_detected = False

        def update_schema(table_def):
            schema_name = table_def["name"]
            schema_tables = table_def["tables"]

            print("Begin partition metadata update for schema {}...\n".format(schema_name))
            for table in schema_tables:
                try:
                    cur = conn.cursor()
                    sys.stdout.write("Updating partition metadata update for table {}...".format(table))
                    cur.execute(UPDATE_PARTITION.format(schema_name, table))
                    cur.fetchone()
                    sys.stdout.write("Done!\n")
                    sys.stdout.flush()
                except Exception as e:
                    failures_detected = True
                    print("Error updating partition metadata for table {}. Caused by:".format(table))
                    print(e)

        for tbl_def in table_definitions:
            update_schema(tbl_def)

        if failures_detected:
            print("Some failures detected.  Returning non-zero exit status")
            exit(1)
